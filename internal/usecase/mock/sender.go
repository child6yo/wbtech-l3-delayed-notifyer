// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/sender.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockstorageAdder is a mock of storageAdder interface.
type MockstorageAdder struct {
	ctrl     *gomock.Controller
	recorder *MockstorageAdderMockRecorder
}

// MockstorageAdderMockRecorder is the mock recorder for MockstorageAdder.
type MockstorageAdderMockRecorder struct {
	mock *MockstorageAdder
}

// NewMockstorageAdder creates a new mock instance.
func NewMockstorageAdder(ctrl *gomock.Controller) *MockstorageAdder {
	mock := &MockstorageAdder{ctrl: ctrl}
	mock.recorder = &MockstorageAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageAdder) EXPECT() *MockstorageAdderMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockstorageAdder) Add(ctx context.Context, key string, value interface{}, exp time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, key, value, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockstorageAdderMockRecorder) Add(ctx, key, value, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockstorageAdder)(nil).Add), ctx, key, value, exp)
}

// MocktelegramSender is a mock of telegramSender interface.
type MocktelegramSender struct {
	ctrl     *gomock.Controller
	recorder *MocktelegramSenderMockRecorder
}

// MocktelegramSenderMockRecorder is the mock recorder for MocktelegramSender.
type MocktelegramSenderMockRecorder struct {
	mock *MocktelegramSender
}

// NewMocktelegramSender creates a new mock instance.
func NewMocktelegramSender(ctrl *gomock.Controller) *MocktelegramSender {
	mock := &MocktelegramSender{ctrl: ctrl}
	mock.recorder = &MocktelegramSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktelegramSender) EXPECT() *MocktelegramSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MocktelegramSender) Send(chatID, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", chatID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MocktelegramSenderMockRecorder) Send(chatID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MocktelegramSender)(nil).Send), chatID, data)
}

// MockemailSender is a mock of emailSender interface.
type MockemailSender struct {
	ctrl     *gomock.Controller
	recorder *MockemailSenderMockRecorder
}

// MockemailSenderMockRecorder is the mock recorder for MockemailSender.
type MockemailSenderMockRecorder struct {
	mock *MockemailSender
}

// NewMockemailSender creates a new mock instance.
func NewMockemailSender(ctrl *gomock.Controller) *MockemailSender {
	mock := &MockemailSender{ctrl: ctrl}
	mock.recorder = &MockemailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockemailSender) EXPECT() *MockemailSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockemailSender) Send(emailAddr, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", emailAddr, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockemailSenderMockRecorder) Send(emailAddr, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockemailSender)(nil).Send), emailAddr, data)
}
