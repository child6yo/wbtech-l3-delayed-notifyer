// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/notification.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Mockstorage) Add(ctx context.Context, key string, value interface{}, exp time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, key, value, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockstorageMockRecorder) Add(ctx, key, value, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mockstorage)(nil).Add), ctx, key, value, exp)
}

// Get mocks base method.
func (m *Mockstorage) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockstorageMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockstorage)(nil).Get), ctx, key)
}

// Remove mocks base method.
func (m *Mockstorage) Remove(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockstorageMockRecorder) Remove(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*Mockstorage)(nil).Remove), ctx, key)
}

// SortedSetAdd mocks base method.
func (m *Mockstorage) SortedSetAdd(ctx context.Context, set string, value interface{}, score float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortedSetAdd", ctx, set, value, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// SortedSetAdd indicates an expected call of SortedSetAdd.
func (mr *MockstorageMockRecorder) SortedSetAdd(ctx, set, value, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortedSetAdd", reflect.TypeOf((*Mockstorage)(nil).SortedSetAdd), ctx, set, value, score)
}
